import numpy as np
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

def rmse(y_true, y_pred):
    """
    Calculate the Root Mean Squared Error (RMSE) between true and predicted values.

    :param y_true: Array-like, true target values
    :param y_pred: Array-like, predicted values
    :return: RMSE value
    """
    rmse_value = np.sqrt(mean_squared_error(y_true, y_pred))
    return rmse_value

def r2(y_true, y_pred):
    """
    Calculate the R-squared (R2) score between true and predicted values.

    :param y_true: Array-like, true target values
    :param y_pred: Array-like, predicted values
    :return: R2 score
    """
    r2_value = r2_score(y_true, y_pred)
    return r2_value

def mae(y_true, y_pred):
    """
    Calculate the Mean Absolute Error (MAE) between true and predicted values.

    :param y_true: Array-like, true target values
    :param y_pred: Array-like, predicted values
    :return: MAE value
    """
    mae_value = mean_absolute_error(y_true, y_pred)
    return mae_value

def evaluate_model(y_true, y_pred):
    """
    Evaluate the model using multiple metrics: RMSE, R2, and MAE.

    :param y_true: Array-like, true target values
    :param y_pred: Array-like, predicted values
    :return: Dictionary containing RMSE, R2, and MAE values
    """
    metrics = {
        'RMSE': rmse(y_true, y_pred),
        'R2': r2(y_true, y_pred),
        'MAE': mae(y_true, y_pred)
    }
    return metrics

if __name__ == "__main__":
    # Example usage
    # For demonstration, y_true and y_pred are dummy arrays
    y_true = np.array([3, -0.5, 2, 7])
    y_pred = np.array([2.5, 0.0, 2, 8])

    metrics = evaluate_model(y_true, y_pred)
    print(f"Evaluation Metrics: {metrics}")
